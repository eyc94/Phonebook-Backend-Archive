{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/DeleteButton.js","components/Persons.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["Filter","props","value","onChange","changeHandler","PersonForm","onSubmit","submitHandler","name","nameHandler","number","numberHandler","type","DeleteButton","onClick","delPerson","text","Persons","displayArray","map","person","Notification","message","classType","className","baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","nameFilter","setNameFilter","errorMessage","setErrorMessage","messageType","setMessageType","useEffect","console","log","personService","initialPersons","personsToShow","filter","toLowerCase","includes","event","target","preventDefault","personObject","length","msg","window","confirm","personToChange","changedPerson","returnedPerson","setTimeout","catch","error","p","concat","e","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5527d040.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = (props) => {\n    return (\n        <div>\n            filter shown with <input value={props.value} onChange={props.changeHandler} />\n        </div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst PersonForm = (props) => {\n    return (\n        <>\n            <form onSubmit={props.submitHandler}>\n                <div>name: <input value={props.name} onChange={props.nameHandler} /></div>\n                <div>number: <input value={props.number} onChange={props.numberHandler} /></div>\n                <div>\n                    <button type=\"submit\">add</button>\n                </div>\n            </form>\n        </>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst DeleteButton = (props) => {\n    return (\n        <>\n            <button onClick={props.delPerson}>{props.text}</button>\n        </>\n    )\n}\n\nexport default DeleteButton","import React from 'react'\nimport DeleteButton from './DeleteButton'\n\nconst Persons = (props) => {\n    return (\n        <>\n            {props.displayArray.map(person =>\n                <div key={person.name}>\n                    {person.name} {person.number}\n                    <DeleteButton delPerson={() => props.delPerson(person)} text=\"delete\" />\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default Persons","import React from 'react'\n\nconst Notification = ({ message, classType }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className={classType}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst del = id => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, del, update }","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\nimport './index.css'\n\nconst App = () => {\n    // Piece of state that holds person objects.\n    const [persons, setPersons] = useState([])\n    // State that holds name input.\n    const [newName, setNewName] = useState('')\n    // State that holds number input.\n    const [newNumber, setNewNumber] = useState('')\n    // State that holds the filter input.\n    const [nameFilter, setNameFilter] = useState('')\n    // State that holds the error message.\n    const [errorMessage, setErrorMessage] = useState(null)\n    // State that holds message type. This is passed as a class value for the message display.\n    const [messageType, setMessageType] = useState('')\n\n    // Effect hook to fetch data from json-server.\n    useEffect(() => {\n        console.log('effect')\n        personService\n            .getAll()\n            .then(initialPersons => {\n                setPersons(initialPersons)\n            })\n    }, [])\n\n    // This event handler function runs when form is submitted.\n    const addPerson = (event) => {\n        event.preventDefault() // Prevent page reload.\n        // Create new person object.\n        const personObject = {\n            name: newName,\n            number: newNumber,\n        }\n        // If person's name is already in the phonebook, alert user.\n        // Make lowercase to handle case insensitive inputs.\n        if (persons.filter(person => person.name.toLowerCase() === newName.toLowerCase()).length > 0) {\n            // Message to display to user.\n            const msg = `${newName} is already added to the phonebook, replace the old number with a new one?`\n            // If the user confirms the message.\n            if (window.confirm(msg)) {\n                // Find the person in the array to change by filtering based on newName entered.\n                // This is an array so return the first position.\n                const personToChange = persons.filter(person => person.name.toLowerCase() === newName.toLowerCase())[0]\n                // Copy the existing person properties other than the new number into the new person object.\n                const changedPerson = { ...personToChange, number: newNumber }\n                // Call axios put method from our service file.\n                personService\n                    .update(personToChange.id, changedPerson) // Pass person's id that we got from filtering and pass in new person to update with.\n                    .then(returnedPerson => {\n                        setMessageType('success')\n                        // Change the state of the persons array so that we can render new number to page.\n                        setPersons(persons.map(person => person.id !== personToChange.id ? person : returnedPerson))\n                        setErrorMessage(\n                            `Added ${returnedPerson.name}`\n                        )\n                        setTimeout(() => {\n                            setErrorMessage(null)\n                        }, 5000)\n                    })\n                    .catch(error => {\n                        setMessageType('error')\n                        setErrorMessage(\n                            `Information of ${personToChange.id} has already been removed from the server`\n                        )\n                        setTimeout(() => {\n                            setErrorMessage(null)\n                        }, 5000)\n                        setPersons(persons.filter(p => p.id !== personToChange.id))\n                    })\n            }\n        } else { // If not already in phonebook, concatenate to persons state.\n            personService\n                .create(personObject)\n                .then(returnedPerson => {\n                    setMessageType('success')\n                    setPersons(persons.concat(returnedPerson))\n                    setErrorMessage(\n                        `Added ${returnedPerson.name}`\n                    )\n                    setTimeout(() => {\n                        setErrorMessage(null)\n                    }, 5000)\n                })\n        }\n        setNewName('') // Clear the name input box.\n        setNewNumber('') // Clear the number input box.\n    }\n\n    // On click handler for delete button.\n    const deletePerson = e => {\n        // We passed in the person object into the event handler.\n        // We can access the id and name properties.\n        const id = e.id\n        const name = e.name\n        const msg = `Delete ${name}?`\n\n        // Display a confirmation box to delete.\n        if (window.confirm(msg)) {\n            personService\n                .del(id)\n                .then(response => {\n                    setPersons(persons.filter(person => person.id !== id))\n                })\n        }\n    }\n\n    // On change event handler for name input box.\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    // On change event handler for number input box.\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    // On change event handler for name filter input box.\n    const handleNameFilter = (event) => {\n        setNameFilter(event.target.value)\n    }\n\n    // Filter the persons to display.\n    const personsToShow = persons.filter(person => {\n        // New array will hold persons that include the name filter input.\n        return person.name.toLowerCase().includes(nameFilter.toLowerCase())\n    })\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={errorMessage} classType={messageType} />\n            <Filter value={nameFilter} changeHandler={handleNameFilter} />\n            <h2>Add a new</h2>\n            <PersonForm\n                submitHandler={addPerson}\n                name={newName}\n                nameHandler={handleNameChange}\n                number={newNumber}\n                numberHandler={handleNumberChange}\n            />\n            <h2>Numbers</h2>\n            <Persons delPerson={deletePerson} displayArray={personsToShow} />\n        </div>\n    )\n}\n\nexport default App","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}